{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > üëâ **Note**: `‚ê†` represents a space character.\n   *\n   * ```markdown\n   * > | ‚ê†‚ê†‚êä\n   *     ^\n   * > | ‚êä\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > üëâ **Note**: `‚ê†` represents a space character.\n   *\n   * ```markdown\n   * > | ‚ê†‚ê†‚êä\n   *       ^\n   * > | ‚êä\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","markdownSpace","blankLine","tokenize","tokenizeBlankLine","partial","effects","ok","nok","start","code","after"],"sources":["C:/Users/andre/Desktop/portfolio/node_modules/micromark-core-commonmark/lib/blank-line.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > üëâ **Note**: `‚ê†` represents a space character.\n   *\n   * ```markdown\n   * > | ‚ê†‚ê†‚êä\n   *     ^\n   * > | ‚êä\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > üëâ **Note**: `‚ê†` represents a space character.\n   *\n   * ```markdown\n   * > | ‚ê†‚ê†‚êä\n   *       ^\n   * > | ‚êä\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAY,QAAQ,yBAAyB;AACtD,SAASC,kBAAkB,EAAEC,aAAa,QAAQ,0BAA0B;AAC5E;AACA,OAAO,MAAMC,SAAS,GAAG;EACvBC,QAAQ,EAAEC,iBAAiB;EAC3BC,OAAO,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA,SAASD,iBAAiBA,CAACE,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EAC3C,OAAOC,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnB,OAAOT,aAAa,CAACS,IAAI,CAAC,GAAGX,YAAY,CAACO,OAAO,EAAEK,KAAK,EAAE,YAAY,CAAC,CAACD,IAAI,CAAC,GAAGC,KAAK,CAACD,IAAI,CAAC;EAC7F;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASC,KAAKA,CAACD,IAAI,EAAE;IACnB,OAAOA,IAAI,KAAK,IAAI,IAAIV,kBAAkB,CAACU,IAAI,CAAC,GAAGH,EAAE,CAACG,IAAI,CAAC,GAAGF,GAAG,CAACE,IAAI,CAAC;EACzE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}