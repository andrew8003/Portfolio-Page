{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","map":{"version":3,"names":["splice","SpliceBuffer","subtokenize","eventsArray","jumps","index","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","events","length","get","type","_tokenizer","_isInFirstContentOfListItem","contentType","Object","assign","subcontent","_container","undefined","end","start","slice","unshift","Number","POSITIVE_INFINITY","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","push","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","line","pop","reverse"],"sources":["C:/Users/andre/Desktop/portfolio/node_modules/micromark-util-subtokenize/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,YAAY,QAAQ,wBAAwB;;AAErD;AACA,SAASA,YAAY,QAAQ,wBAAwB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,WAAW,EAAE;EACvC;EACA,MAAMC,KAAK,GAAG,CAAC,CAAC;EAChB,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd;EACA,IAAIC,KAAK;EACT;EACA,IAAIC,SAAS;EACb;EACA,IAAIC,UAAU;EACd;EACA,IAAIC,UAAU;EACd;EACA,IAAIC,UAAU;EACd;EACA,IAAIC,SAAS;EACb;EACA,IAAIC,IAAI;EACR,MAAMC,MAAM,GAAG,IAAIZ,YAAY,CAACE,WAAW,CAAC;EAC5C,OAAO,EAAEE,KAAK,GAAGQ,MAAM,CAACC,MAAM,EAAE;IAC9B,OAAOT,KAAK,IAAID,KAAK,EAAE;MACrBC,KAAK,GAAGD,KAAK,CAACC,KAAK,CAAC;IACtB;IACAC,KAAK,GAAGO,MAAM,CAACE,GAAG,CAACV,KAAK,CAAC;;IAEzB;IACA;IACA,IAAIA,KAAK,IAAIC,KAAK,CAAC,CAAC,CAAC,CAACU,IAAI,KAAK,WAAW,IAAIH,MAAM,CAACE,GAAG,CAACV,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACW,IAAI,KAAK,gBAAgB,EAAE;MAChGL,SAAS,GAAGL,KAAK,CAAC,CAAC,CAAC,CAACW,UAAU,CAACJ,MAAM;MACtCL,UAAU,GAAG,CAAC;MACd,IAAIA,UAAU,GAAGG,SAAS,CAACG,MAAM,IAAIH,SAAS,CAACH,UAAU,CAAC,CAAC,CAAC,CAAC,CAACQ,IAAI,KAAK,iBAAiB,EAAE;QACxFR,UAAU,IAAI,CAAC;MACjB;MACA,IAAIA,UAAU,GAAGG,SAAS,CAACG,MAAM,IAAIH,SAAS,CAACH,UAAU,CAAC,CAAC,CAAC,CAAC,CAACQ,IAAI,KAAK,SAAS,EAAE;QAChF,OAAO,EAAER,UAAU,GAAGG,SAAS,CAACG,MAAM,EAAE;UACtC,IAAIH,SAAS,CAACH,UAAU,CAAC,CAAC,CAAC,CAAC,CAACQ,IAAI,KAAK,SAAS,EAAE;YAC/C;UACF;UACA,IAAIL,SAAS,CAACH,UAAU,CAAC,CAAC,CAAC,CAAC,CAACQ,IAAI,KAAK,WAAW,EAAE;YACjDL,SAAS,CAACH,UAAU,CAAC,CAAC,CAAC,CAAC,CAACU,2BAA2B,GAAG,IAAI;YAC3DV,UAAU,EAAE;UACd;QACF;MACF;IACF;;IAEA;IACA,IAAIF,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE;MACxB,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACa,WAAW,EAAE;QACxBC,MAAM,CAACC,MAAM,CAACjB,KAAK,EAAEkB,UAAU,CAACT,MAAM,EAAER,KAAK,CAAC,CAAC;QAC/CA,KAAK,GAAGD,KAAK,CAACC,KAAK,CAAC;QACpBO,IAAI,GAAG,IAAI;MACb;IACF;IACA;IAAA,KACK,IAAIN,KAAK,CAAC,CAAC,CAAC,CAACiB,UAAU,EAAE;MAC5Bf,UAAU,GAAGH,KAAK;MAClBE,SAAS,GAAGiB,SAAS;MACrB,OAAOhB,UAAU,EAAE,EAAE;QACnBC,UAAU,GAAGI,MAAM,CAACE,GAAG,CAACP,UAAU,CAAC;QACnC,IAAIC,UAAU,CAAC,CAAC,CAAC,CAACO,IAAI,KAAK,YAAY,IAAIP,UAAU,CAAC,CAAC,CAAC,CAACO,IAAI,KAAK,iBAAiB,EAAE;UACnF,IAAIP,UAAU,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE;YAC7B,IAAIF,SAAS,EAAE;cACbM,MAAM,CAACE,GAAG,CAACR,SAAS,CAAC,CAAC,CAAC,CAAC,CAACS,IAAI,GAAG,iBAAiB;YACnD;YACAP,UAAU,CAAC,CAAC,CAAC,CAACO,IAAI,GAAG,YAAY;YACjCT,SAAS,GAAGC,UAAU;UACxB;QACF,CAAC,MAAM;UACL;QACF;MACF;MACA,IAAID,SAAS,EAAE;QACb;QACAD,KAAK,CAAC,CAAC,CAAC,CAACmB,GAAG,GAAGL,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAER,MAAM,CAACE,GAAG,CAACR,SAAS,CAAC,CAAC,CAAC,CAAC,CAACmB,KAAK,CAAC;;QAEhE;QACAhB,UAAU,GAAGG,MAAM,CAACc,KAAK,CAACpB,SAAS,EAAEF,KAAK,CAAC;QAC3CK,UAAU,CAACkB,OAAO,CAACtB,KAAK,CAAC;QACzBO,MAAM,CAACb,MAAM,CAACO,SAAS,EAAEF,KAAK,GAAGE,SAAS,GAAG,CAAC,EAAEG,UAAU,CAAC;MAC7D;IACF;EACF;;EAEA;EACAV,MAAM,CAACG,WAAW,EAAE,CAAC,EAAE0B,MAAM,CAACC,iBAAiB,EAAEjB,MAAM,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC;EACjE,OAAO,CAACf,IAAI;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,UAAUA,CAACT,MAAM,EAAEkB,UAAU,EAAE;EACtC,MAAMC,KAAK,GAAGnB,MAAM,CAACE,GAAG,CAACgB,UAAU,CAAC,CAAC,CAAC,CAAC;EACvC,MAAME,OAAO,GAAGpB,MAAM,CAACE,GAAG,CAACgB,UAAU,CAAC,CAAC,CAAC,CAAC;EACzC,IAAIG,aAAa,GAAGH,UAAU,GAAG,CAAC;EAClC;EACA,MAAMI,cAAc,GAAG,EAAE;EACzB,MAAMC,SAAS,GAAGJ,KAAK,CAACf,UAAU,IAAIgB,OAAO,CAACI,MAAM,CAACL,KAAK,CAACb,WAAW,CAAC,CAACa,KAAK,CAACN,KAAK,CAAC;EACpF,MAAMY,WAAW,GAAGF,SAAS,CAACvB,MAAM;EACpC;EACA,MAAMT,KAAK,GAAG,EAAE;EAChB;EACA,MAAMmC,IAAI,GAAG,CAAC,CAAC;EACf;EACA,IAAIC,MAAM;EACV;EACA,IAAIC,QAAQ;EACZ,IAAIpC,KAAK,GAAG,CAAC,CAAC;EACd;EACA,IAAIqC,OAAO,GAAGV,KAAK;EACnB,IAAIW,MAAM,GAAG,CAAC;EACd,IAAIjB,KAAK,GAAG,CAAC;EACb,MAAMkB,MAAM,GAAG,CAAClB,KAAK,CAAC;;EAEtB;EACA;EACA,OAAOgB,OAAO,EAAE;IACd;IACA,OAAO7B,MAAM,CAACE,GAAG,CAAC,EAAEmB,aAAa,CAAC,CAAC,CAAC,CAAC,KAAKQ,OAAO,EAAE;MACjD;IAAA;IAEFP,cAAc,CAACU,IAAI,CAACX,aAAa,CAAC;IAClC,IAAI,CAACQ,OAAO,CAACzB,UAAU,EAAE;MACvBuB,MAAM,GAAGP,OAAO,CAACa,WAAW,CAACJ,OAAO,CAAC;MACrC,IAAI,CAACA,OAAO,CAACK,IAAI,EAAE;QACjBP,MAAM,CAACK,IAAI,CAAC,IAAI,CAAC;MACnB;MACA,IAAIJ,QAAQ,EAAE;QACZL,SAAS,CAACY,UAAU,CAACN,OAAO,CAAChB,KAAK,CAAC;MACrC;MACA,IAAIgB,OAAO,CAACxB,2BAA2B,EAAE;QACvCkB,SAAS,CAACa,kCAAkC,GAAG,IAAI;MACrD;MACAb,SAAS,CAACc,KAAK,CAACV,MAAM,CAAC;MACvB,IAAIE,OAAO,CAACxB,2BAA2B,EAAE;QACvCkB,SAAS,CAACa,kCAAkC,GAAGzB,SAAS;MAC1D;IACF;;IAEA;IACAiB,QAAQ,GAAGC,OAAO;IAClBA,OAAO,GAAGA,OAAO,CAACK,IAAI;EACxB;;EAEA;EACA;EACAL,OAAO,GAAGV,KAAK;EACf,OAAO,EAAE3B,KAAK,GAAGiC,WAAW,CAACxB,MAAM,EAAE;IACnC;IACA;IACAwB,WAAW,CAACjC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,IAAIiC,WAAW,CAACjC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,OAAO,IAAIiC,WAAW,CAACjC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACW,IAAI,KAAKsB,WAAW,CAACjC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACW,IAAI,IAAIsB,WAAW,CAACjC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACqB,KAAK,CAACyB,IAAI,KAAKb,WAAW,CAACjC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACoB,GAAG,CAAC0B,IAAI,EAAE;MACjNzB,KAAK,GAAGrB,KAAK,GAAG,CAAC;MACjBuC,MAAM,CAACC,IAAI,CAACnB,KAAK,CAAC;MAClB;MACAgB,OAAO,CAACzB,UAAU,GAAGO,SAAS;MAC9BkB,OAAO,CAACD,QAAQ,GAAGjB,SAAS;MAC5BkB,OAAO,GAAGA,OAAO,CAACK,IAAI;IACxB;EACF;;EAEA;EACAX,SAAS,CAACvB,MAAM,GAAG,EAAE;;EAErB;EACA;EACA;EACA,IAAI6B,OAAO,EAAE;IACX;IACAA,OAAO,CAACzB,UAAU,GAAGO,SAAS;IAC9BkB,OAAO,CAACD,QAAQ,GAAGjB,SAAS;EAC9B,CAAC,MAAM;IACLoB,MAAM,CAACQ,GAAG,CAAC,CAAC;EACd;;EAEA;EACA;EACA/C,KAAK,GAAGuC,MAAM,CAAC9B,MAAM;EACrB,OAAOT,KAAK,EAAE,EAAE;IACd,MAAMsB,KAAK,GAAGW,WAAW,CAACX,KAAK,CAACiB,MAAM,CAACvC,KAAK,CAAC,EAAEuC,MAAM,CAACvC,KAAK,GAAG,CAAC,CAAC,CAAC;IACjE,MAAMqB,KAAK,GAAGS,cAAc,CAACiB,GAAG,CAAC,CAAC;IAClChD,KAAK,CAACyC,IAAI,CAAC,CAACnB,KAAK,EAAEA,KAAK,GAAGC,KAAK,CAACb,MAAM,GAAG,CAAC,CAAC,CAAC;IAC7CD,MAAM,CAACb,MAAM,CAAC0B,KAAK,EAAE,CAAC,EAAEC,KAAK,CAAC;EAChC;EACAvB,KAAK,CAACiD,OAAO,CAAC,CAAC;EACfhD,KAAK,GAAG,CAAC,CAAC;EACV,OAAO,EAAEA,KAAK,GAAGD,KAAK,CAACU,MAAM,EAAE;IAC7ByB,IAAI,CAACI,MAAM,GAAGvC,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGsC,MAAM,GAAGvC,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IACzDsC,MAAM,IAAIvC,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGD,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;EACjD;EACA,OAAOkC,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}